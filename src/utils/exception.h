#pragma once

#include <stdexcept>
#include <string>
#include <iostream>

namespace Utils
{

class Exception : public std::exception
{
public:
    Exception(const std::string& message);

    std::string message() const;

    const char* what() const noexcept;

    Exception& setThrowingFileAndLine(const std::string& throwingFile, int line);

private:
    std::string mMessage;
    std::string mThrowingFile;
	int mThrowingLine;
};

// We define a small macro to get throw place's file name and line
#define THROW(exception) \
    throw exception.setThrowingFileAndLine(__FILE__, __LINE__);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class FileNotFound : public Exception
{
public:
    FileNotFound(const std::string& fileName);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class CantOpenFile : public Exception
{
public:
    CantOpenFile(const std::string& fileName);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class IncorrectFileFormat : public Exception
{
public:
    IncorrectFileFormat(const std::string& fileName, const std::string& errorMsg = "");
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class RuntimeError : public Exception
{
public:
    RuntimeError(const std::string& errorMsg);
};

}
