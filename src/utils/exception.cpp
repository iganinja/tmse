#include "exception.h"


namespace Utils
{

Exception::Exception(const std::string& message) :
	mMessage{message},
	mThrowingLine{-1}
{
}

std::string Exception::message() const
{
    return mMessage + " [" + mThrowingFile + "(" + std::to_string(mThrowingLine) + ")]";
}

const char* Exception::what() const noexcept
{
    return message().c_str();
}

Exception& Exception::setThrowingFileAndLine(const std::string& throwingFile, int line)
{
	mThrowingFile = throwingFile;
	mThrowingLine = line;
	return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

FileNotFound::FileNotFound(const std::string& fileName) :
    Exception{"File " + fileName + " not found"}
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CantOpenFile::CantOpenFile(const std::string& fileName) :
    Exception{"Cannot open " + fileName + " file"}
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

IncorrectFileFormat::IncorrectFileFormat(const std::string& fileName, const std::string& errorMsg) :
    Exception{"File " + fileName + " has incorrect format" + (errorMsg.empty()? "" : ": " + errorMsg)}
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

RuntimeError::RuntimeError(const std::string& errorMsg) :
	Exception{errorMsg}
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}
